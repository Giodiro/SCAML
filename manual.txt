SCAML Manual
--- Explain syntax
	--- Program structure
		--- List of definitions and applications at the top level. Each delimited by ;; (Ocaml)
	--- Local definitions are possible inside functions
	--- Functions can take multiple arguments.
	--- Scheme like syntax: application delimited by brackets
	--- Function definition syntax: (arg:type ...)
	---
--- Design decisions
	--- Pure functional -> no side effects
	--- Statically typed (type checking done before interpretation)
	--- Strongly typed (but no inference, types must be explicitly declared)
	--- Lambdas\Function type (higher order functions)
	--- Environment (works like Scheme, extended when applying)
	--- Types
		--- 'words' (in our language strings) are quoted, because it's more extensible. Therefore we have to parse input differently
--- Describe additional features
	--- Programmer convenience
		--- Library: basic functions on types
			--- useful cons which is designed to deal with sets (discard duplicates)
			--- generic list operations such as head and tail
			--- specific set operations (uniq, seteq, sort)
		--- Logic/Math operations
	--- Type checking
		--- The type checker has a separate environment (bindings name -> type)
		--- Catches most programming errors
		--- Usually can tell what the correct type was -> error message
	--- Informative error messages
		--- Lexer level -> detect invalid tokens
		--- Parser levels -> detect missing/invalid constructs
		--- Type checker (see above)
		--- Interpreter -> Runtime errors
		--- Added location data to our AST to report error location.
	--- 

Actual Manual
 1) Syntax
 Each program in the language is structured as a sequence of function and variable definitions and function applications. Each such program fragment is delimited by ;; as in OCaml. Bindings between names and expressions are made when the function or variable is defined which means that any declaration should come before using the identifier in the program. Otherwise an 'Unbound' error message is thrown. 
 The language syntax allows local definitions within functions. As in any functional language they are not visible from outside the declaration and are usable only in the 'in' clasue which is their scope. 
 In order to make fucntions as generic as possible they are allowed to take any number of arguments. The syntax for defining functions is let <func_name> (<arg1:arg_type1> <arg2:arg_type2> ... <argn:arg_typen>):<func_return_type> = <expr>;; (*can move the syntax to the block of syntactic rules at the end*)
 Function application is surrounded in brackets where the first identifier is the function and the rest are the arguments.    
